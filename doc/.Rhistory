mutate(sale.price=ifelse(SALE.PRICE==0, NA, SALE.PRICE))%>%
mutate(footage=ifelse(GROSS.SQUARE.FEET==0, NA, GROSS.SQUARE.FEET))%>%
mutate(unit.price=sale.price/footage)%>%
mutate(bldg.type=substr(BUILDING.CLASS.CATEGORY, 1, 2))%>%
filter(bldg.type %in% c("10", "13", "25", "28"))%>%
arrange(bldg.type)
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if(!require("lubridate")) install.packages('lubridate')
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
library(devtools)
mh2009=read.csv(file="../data/ManhattanHousing.csv")
mh2009=read.csv(file="../data/ManhattanHousing.csv/")
mh2009=read.csv(file="/Users/ouminamikun/Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15/data/ManhattanHousing.csv")
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if(!require("lubridate")) install.packages('lubridate')
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
library(devtools)
mh2009=read.csv(file="/Users/ouminamikun/Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15/data/ManhattanHousing.csv")
datatable(sample_n(mh2009, 50))
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
save(count.df, file="../output/count.RData")
load("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15/output/count.RData")
save(count.df, file="/Users/ouminamikun/Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15/output/count.RData")
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if(!require("lubridate")) install.packages('lubridate')
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
library(devtools)
mh2009=read.csv(file="/Users/ouminamikun/Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15/data/ManhattanHousing.csv")
datatable(sample_n(mh2009, 50))
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
save(count.df, file="/Users/ouminamikun/Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15/output/count.RData")
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
?datatable
?sample_n
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
head
head(mh2009)
mutate()
?mutate
environment(CoorMap$train)
environment(CoordMap$train)
coord_map2()
citation("ggmap")
citation(package = "ggmap")
require(devtools)
install_version("ggplot2", version = "2.6", repos = "http://cran.us.r-project.org")
install_version("ggplot2", version = "2.6.0", repos = "http://cran.us.r-project.org")
install_version("ggplot2", version = "0.9.1", repos = "http://cran.us.r-project.org")
library(ggmap)
install_version("ggplot2", version = "2.2.0", repos = "http://cran.us.r-project.org")
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if(!require("lubridate")) install.packages('lubridate')
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
library(devtools)
mh2009=read.csv(file="../data/ManhattanHousing.csv")
datatable(sample_n(mh2009, 50))
mh2009=
mh2009%>%
filter(ZIP.CODE>0)%>%
mutate(region=as.character(ZIP.CODE))
count.df=mh2009%>%
group_by(region)%>%
summarise(
value=n()
)
save(count.df, file="../output/count.RData")
library(choroplethrZip)
zip_choropleth(count.df,
title       = "2009 Manhattan housing sales",
legend      = "Number of sales",
county_zoom = 36061)
library(ggmap)
library(dplyr)
mh2009.selgeo=
mh2009%>%
sample_n(10)%>%
select(starts_with("ADD"))%>%
mutate(ADDRESS_Ext=paste(ADDRESS, "New York, NY", sep=","))%>%
mutate_geocode(ADDRESS_Ext)
library(ggmap)
ggmap(get_map("New York, New York",zoom=11,color = "bw")) +
geom_point(data=mh2009.selgeo, aes(x=lon,y=lat),  color='red')
mh2009.use=
mh2009%>%
mutate(sale.month=month(as.Date(SALE.DATE, "%m/%d/%y")))%>%
mutate(sale.price=ifelse(SALE.PRICE==0, NA, SALE.PRICE))%>%
mutate(footage=ifelse(GROSS.SQUARE.FEET==0, NA, GROSS.SQUARE.FEET))%>%
mutate(unit.price=sale.price/footage)%>%
mutate(bldg.type=substr(BUILDING.CLASS.CATEGORY, 1, 2))%>%
filter(bldg.type %in% c("10", "13", "25", "28"))%>%
arrange(bldg.type)
save(mh2009.use, file="../output/mh2009use.RData")
man.nbhd=c("Central Harlem", "Chelsea and Clinton",
"East Harlem", "Gramercy Park and Murray Hill",
"Greenwich Village and Soho", "Lower Manhattan",
"Lower East Side", "Upper East Side", "Upper West Side",
"Inwood and Washington Heights")
zip.nbhd=list(1:length(man.nbhd))
zip.nbhd[[1]]=c(10026, 10027, 10030, 10037, 10039)
zip.nbhd[[2]]=c(10001, 10011, 10018, 10019, 10020)
zip.nbhd[[3]]=c(10036, 10029, 10035)
zip.nbhd[[4]]=c(10010, 10016, 10017, 10022)
zip.nbhd[[5]]=c(10012, 10013, 10014)
zip.nbhd[[6]]=c(10004, 10005, 10006, 10007, 10038, 10280)
zip.nbhd[[7]]=c(10002, 10003, 10009)
zip.nbhd[[8]]=c(10021, 10028, 10044, 10065, 10075, 10128)
zip.nbhd[[9]]=c(10023, 10024, 10025)
zip.nbhd[[10]]=c(10031, 10032, 10033, 10034, 10040)
shiny::runApp('Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15/app')
load("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15/output/count.RData")
View(count.df)
runExample("01_hello")
if (!require("DT")) install.packages('DT')
if (!require("dtplyr")) install.packages('dtplyr')
if(!require("lubridate")) install.packages('lubridate')
library(dtplyr)
library(dplyr)
library(DT)
library(lubridate)
library(devtools)
runExample("01_hello")
install.packages("shiny")
library(shiny)
runExample("01_hello")
runApp('~/Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15/app')
runApp('~/Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15/app')
runApp('~/Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15/app')
plot(NA, NA, type = "n", xlim = c(-4, 2), ylim = c(-1, 5), asp = 1, xlab = "X1", ylab = "X2")
symbols(c(-1), c(2), circles = c(2), add = TRUE, inches = FALSE)
plot(NA, NA, type = "n", xlim = c(-4, 2), ylim = c(-1, 5), asp = 1, xlab = "X1", ylab = "X2")
symbols(c(-1), c(2), circles = c(2), add = TRUE, inches = FALSE)
plot(NA, NA, type = "n", xlim = c(-4, 2), ylim = c(-1, 5), asp = 1, xlab = "X1", ylab = "X2")
symbols(c(-1), c(2), circles = c(2), add = TRUE, inches = FALSE)
text(c(-1), c(2), "< 4")
text(c(-4), c(2), "> 4")
plot(NA, NA, type = "n", xlim = c(-4, 2), ylim = c(-1, 5), asp = 1, xlab = "X1", ylab = "X2")
symbols(c(-1), c(2), circles = c(2), add = TRUE, inches = FALSE)
text(c(-1), c(2), "< 4")
text(c(-4), c(2), "> 4")
text(c(4), c(2), ">4")
plot(NA, NA, type = "n", xlim = c(-4, 2), ylim = c(-1, 5), asp = 1, xlab = "X1", ylab = "X2")
symbols(c(-1), c(2), circles = c(2), add = TRUE, inches = FALSE)
text(c(-1), c(2), "< 4")
text(c(-4), c(2), "> 4")
text(c(2), c(2), ">4")
plot(NA, NA, type = "n", xlim = c(-4, 2), ylim = c(-1, 5), asp = 1, xlab = "X1", ylab = "X2")
symbols(c(-1), c(2), circles = c(2), add = TRUE, inches = FALSE)
text(c(-1), c(2), "<= 4")
text(c(-4), c(2), "> 4")
text(c(2), c(2), ">4")
plot(c(0, -1, 2, 3), c(0, 1, 2, 8), col = c("blue", "red", "blue", "blue"),
type = "p", xlab = "X1", ylab = "X2")
symbols(c(-1), c(2), circles = c(2), add = TRUE, inches = FALSE)
plot(c(0, -1, 2, 3), c(0, 1, 2, 8), col = c("blue", "red", "blue", "blue"),
type = "p", asp = 1, xlab = "X1", ylab = "X2")
symbols(c(-1), c(2), circles = c(2), add = TRUE, inches = FALSE)
plot(c(0, -1, 2, 3), c(0, 1, 2, 8), col = c("blue", "red", "blue", "blue"),
type = "p", asp = 1, xlab = "X1", ylab = "X2")
symbols(c(-1), c(2), circles = c(2), add = TRUE)
plot(c(0, -1, 2, 3), c(0, 1, 2, 8), col = c("blue", "red", "blue", "blue"),
type = "p", asp = 1, xlab = "X1", ylab = "X2")
symbols(c(-1), c(2), circles = c(2), add = TRUE, inches = FALSE)
library(MASS)
library(glmnet)
library(leaps)
train3 <- read.table("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ML/HW/Assignment_2/train_3.txt", header = F,sep = ",")
train5 <- read.table("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ML/HW/Assignment_2/train_5.txt", header = F, sep = ",")
train8 <- read.table("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ML/HW/Assignment_2/train_8.txt", header = F, sep = ",")
test <- read.table("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ML/HW/Assignment_2/zip_test.txt", header = F)
names(test) <- c("y", names(test))[1:257]
test <- test[test$y%in%c(3,5,8),]
train3$y <- 3
train5$y <- 5
train8$y <- 8
d.f <- rbind(train3,train5, train8)
lda1 <- lda(y~., data = d.f)
mat <- matrix(NA, 4,2)
mat[1,1]=mean(predict(lda1,d.f)$class == d.f$y)
mat[1,2]=mean(predict(lda1,test)$class == test$y)
mat
pca
pca  <- prcomp(d.f[1:256], scale. = T)
pca
pca  <- prcomp(d.f[1:256], scale. = T)
std.pca  <- pca$sdev
prop <- (std.pca^2)/sum(std.pca^2)
plot(prop, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
train <- data.frame(y = d.f$y, pca$x)[,1:50]
lda.pca <- lda(y~.,data=train)
mat[2,1] <- mean(predict(lda.pca,train)$class == d.f$y)
test.pca <- as.data.frame(y = test$y,predict(pca, newdata =test[,-1] ))[,1:50]
mat[2,2]=mean(predict(lda.prc,test.pca)$class == test$y)
mat[2,2]=mean(predict(lda.pca,test.pca)$class == test$y)
mat
plot(prop, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
pca  <- prcomp(d.f[1:256], scale. = T)
train.pca <- data.frame(y = d.f$y, pca$x)[,1:50]
lda.pca <- lda(y~.,data=train.pca)
mat[2,1] <- mean(predict(lda.pca,train.pca)$class == d.f$y)
test.pca <- as.data.frame(y = test$y,predict(pca, newdata =test[,-1] ))[,1:50]
mat[2,2]=mean(predict(lda.pca,test.pca)$class == test$y)
mat
d.f.mean <- matrix(NA,dim(d.f)[1], 64)
for( i in 1:dim(d.f)[1])
{
mat1 <- matrix( d.f[i,1:256],16,16,byrow=T)
mat2 <- matrix(NA,8,8)
for( k in 1:8)
for( t in 1:8)
{
mat2[k,t] <- mean(unlist(mat1[2*k-0:1, 2*t-0:1]))
}
d.f.mean[i,] <- c(c(mat2))
}
d.f.mean <- data.frame(d.f.mean)
d.f.mean$y <- d.f$y
test.mean <- matrix(NA,dim(test)[1], 64)
for( i in 1:dim(test)[1])
{
mat1 <- matrix( test[i,-1],16,16,byrow=T)
mat2 <- matrix(NA,8,8)
for( k in 1:8)
for( t in 1:8)
{
mat2[k,t] <- mean(unlist (mat[2*k-0:1, 2*t-0:1] ) )
}
test.mean[i,]=c(c(mat2))
}
d.f.mean <- matrix(NA,dim(d.f)[1], 64)
for( i in 1:dim(d.f)[1])
{
mat1 <- matrix( d.f[i,1:256],16,16,byrow=T)
mat2 <- matrix(NA,8,8)
for( k in 1:8)
for( t in 1:8)
{
mat2[k,t] <- mean(unlist(mat1[2*k-0:1, 2*t-0:1]))
}
d.f.mean[i,] <- c(c(mat2))
}
d.f.mean <- data.frame(d.f.mean)
d.f.mean$y <- d.f$y
test.mean <- matrix(NA,dim(test)[1], 64)
for( i in 1:dim(test)[1])
{
mat1 <- matrix( test[i,-1],16,16,byrow=T)
mat2 <- matrix(NA,8,8)
for( k in 1:8)
for( t in 1:8)
{
mat2[k,t] <- mean(unlist (mat1[2*k-0:1, 2*t-0:1] ) )
}
test.mean[i,]=c(c(mat2))
}
test.mean <- data.frame(test.mean)
test.mean$y <- test$y[i]
lda.mean <- lda(y~.,data=d.mean)
lda.mean <- lda(y~.,data=d.f.mean)
mat[3,1] <- mean(predict(lda.mean,d.mean)$class == d.f$y)
mat[3,1] <- mean(predict(lda.mean,d.f.mean)$class == d.f$y)
mat[3,2] <- mean(predict(lda.mean,test.mean)$class == test$y)
mat
x_train <- as.matrix(d.f.mean[,1:64])
y_train <- factor(d.f$y)
x_test <- as.matrix(test.mean[,1:64])
y_test <- factor(test$y,levels=levels(y_train))
fit <- glmnet(x=x_train,y=y_train, family="multinomial")
L1 <- predict(fit,x_train,type="response",s=0.01)[,,1]
predict_train=c()
for(i in 1:dim(L1)[1])
predict_train[i]= levels(y_train) [which( L1[i,]==max(L1[i,]))]
mat[4,1] <- mean(predict_train==y_train)
L2 <- predict(fit,x_test,type="response",s=0.01)[,,1]
predict_test=c()
for(i in 1:dim(L2)[1])
predict_test[i]= levels(y_test) [which( L2[i,]==max(L2[i,])  )]
mat[4,2]=mean(predict_test==y_test)
mat
crimes <- read.csv("../data/OPE CSS Custom Data 2017-02-12 134856/Criminal_Offenses_On_campus.csv")
for(i in 6:19){
as.numeric(crimes[,i])
} #convert integer to numberic
crimes <- read.csv("../data/OPE CSS Custom Data 2017-02-12 134856/Criminal_Offenses_On_campus.csv")
for(i in 6:19){
as.numeric(crimes[,i])
} #convert integer to numberic
#sum of all types of crimes for each institution and combine it into data frame
crimes$total <- rowSums(crimes[,-c(1:6)],na.rm = TRUE)
##calculate total crimes for every year and create a vector for it
crimes.split <- split(crimes, f = as.factor(crimes$Survey.year))
year.sum <- NA
for(i in 1: length(crimes.split)){
year.sum[i] <- sum(crimes.split[[i]]$total)
}
##calculate every types of crimes for every year and create a vector for it
crimes.year <- split(crimes, f = as.factor(crimes$Survey.year))
year.sum <- NA
for(i in 1: length(crimes.year)){
year.sum[i] <- sum(crimes.year[[i]]$total)
}
View(crimes)
colSums(crimes.year$`2001`, na.rm = T)
colSums(crimes.year$`2001`[,-(1:6)], na.rm = T)
View(crimes)
type.sum <- NA
for(i in 1:14){
type.sum[i] <- colSums(crimes.year[[i]][,-c(1:6)], na.rm = T)
}
type.sum[1]
type.sum[2]
crimes.year[[1]]
y2001 <- colSums(crimes.year$`2001`[,-(1:6)], na.rm = T)
typeof(y2001)
class(y2001)
attributes(y2001)
type.sum <- list(NA)
for(i in 1:14){
type.sum[i] <- colSums(crimes.year[[i]][,-c(1:6)], na.rm = T)
}
type.sum[[8]]
View(crimes)
View(crimes)
x <- unique(crimes$Survey.year)
x
colSums(crimes.year$`2001`[,-c(1:6)])
head(crimes.year[[1]])
type.sum <- list(NA)
for(i in 1:14){
type.sum[i] <- colSums(crimes[[1]][ ,-c(1:6)], na.rm = T)
}
for(i in 1:14){
type.sum[i] <- colSums(crimes.year[[1]][,-c(1:6)], na.rm = T)
}
type.sum
for(i in 1:14){
type.sum[i] <- colSums(crimes.year[[i]][,-c(1:6)], na.rm = T)
}
type.sum
View(crimes)
crimes.type <- crimes[,-c(1:6)]
View(crimes.type)
crimes.type <- crimes[,-c(2:6)]
View(crimes.type)
type.sum <- tapply(crimes.type, factor(crimes.type$Survey.year), colSums, na.rm = T)
type.sum <- tapply(crimes.type, factor(crimes.type$Survey.year), colSums)
type.sum <- tapply(crimes.type, as.factor(crimes.type$Survey.year), colSums)
View(crimes.type)
colSums(crimes$Survey.year == 2001)
colSums(crimes$Survey.year == 2001, na.rm = T)
type.sum <- lapply(crimes.year, colSums)
type.sum <- lapply(crimes.year, colSums, na.rm = T)
is.data.frame(crimes.year$`2001`)
is.data.frame(crimes.type[[1]])
is.list(crimes.year[[1]])
type.sum <- lapply(crimes.year[[1]], colSums, na.rm = T)
head(crimes.year[[1]])
crimes.year[[1]][,6:18]
?colSums
library(pylr)
library(plyr)
typeof(crimes$Survey.year)
??ddply
?ddply
type.sum <- ddply(.crimes, year, colSums)
type.sum <- ddply(crimes, year, colSums)
year <- c("2001", "2002", "2003", "2004","2005", "2006","2007", "2008","2009", "2010","2011", "2012","2013", "2014")
type.sum <- ddply(crimes, year, colSums)
type.sum <- ddply(crimes[,-(1:6)], year, colSums)
type.sum
sub.crimes <- subset(crimes, crimes$Survey.year == year)
sub.crimes
sub.crimes$Survey.year
sub.crimes
sub.crimes <- subset(crimes, crimes$Survey.year == year[1])
sub.crimes
colSums(sub.crimes[,-(1:6)])
is.list
is.list(colSums(sub.crimes[,-(1:6)]))
is.matrix(colSums(sub.crimes[,-(1:6)]))
is.data.frame(colSums(sub.crimes[,-(1:6)]))
class(colSums(sub.crimes[,-(1:6)]))
ddply
ddply(crimes[,-c(1:6)], year, colSums)
ddply(crimes.type, as.factor(crimes.type$Survey.year), colSums)
y2001 <- colSums(sub.crimes[,-(1:6)])
y2001[1]
y2001[2]
y2001 <- colSums(crimes.year$`2001`[,-c(1:6)])
y2001
crimes.year$[1]
as.data.frame(crimes.year[[1]])
type.sum <- NULL
for(i in 1:14){
type.sum[i] <- colSums(as.data.frame(crimes.year[[1]])[,-c(1:6)])
}
type.sum
y2001 <- colSums(crimes.year$`2001`[,-c(1:6)]); y2002 <- colSums(crimes.year$`2002`[,-c(1:6)]);
y2003 <- colSums(crimes.year$`2003`[,-c(1:6)]); y2004 <- colSums(crimes.year$`2004`[,-c(1:6)]);
y2005 <- colSums(crimes.year$`2005`[,-c(1:6)]); y2006 <- colSums(crimes.year$`2006`[,-c(1:6)]);
y2007 <- colSums(crimes.year$`2007`[,-c(1:6)]); y2008 <- colSums(crimes.year$`2008`[,-c(1:6)]);
y2009 <- colSums(crimes.year$`2009`[,-c(1:6)]); y2010 <- colSums(crimes.year$`2010`[,-c(1:6)]);
y2011 <- colSums(crimes.year$`2011`[,-c(1:6)]); y2001 <- colSums(crimes.year$`2012`[,-c(1:6)]);
y2013 <- colSums(crimes.year$`2013`[,-c(1:6)]); y2014 <- colSums(crimes.year$`2014`[,-c(1:6)]);
is.list(y2001)
is.data.frame(y2001)
attributes(y2001)
str(y2001)
class(crimes.year[[1]])
aggregate(crimes[,-c(1:6)], crimes$Survey.year, colSums)
aggregate(crimes[,-c(1:6)], list(crimes$Survey.year), colSums)
aggregate(crimes[,-c(1:6)], list(crimes$Survey.year), sum)
class(aggregate(crimes[,-c(1:6)], list(crimes$Survey.year), sum))
agg <- aggregate(crimes[,-c(1:6)], list(crimes$Survey.year), sum)
plot(c(2001:2014), agg$Negligent.manslaughter)
plot(c(2001:2014), agg$Sex.offenses...Forcible)
barplot(c(2001:2014), agg$Sex.offenses...Forcible)
barplot( agg$Sex.offenses...Forcible)
barplot( agg$Fondling)
barplot( agg$Incest)
barplot( agg$Sex.offenses...Non.forcible)
barplot( agg$Statutory.rape)
barplot( agg$Robbery)
barplot( agg$Aggravated.assault)
head(agg)
library(ggplot2)
library(ggmap)
crimes <- read.csv("../data/OPE CSS Custom Data 2017-02-12 134856/Criminal_Offenses_On_campus.csv")
campus_2 <- as.character(unique(crimes$Institution.name))[961:1921] # nanjun
coordinate_2 <- geocode(campus_2) # nanjun
View(agg)
library(shiny)
runExample("01_hello")
head(campus_2)
head(coordinate_2)
?write.csv
write.csv(campus_2, "/Users/ouminamikun/Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15/data/campus_2")
write.csv(coordinate_2, "/Users/ouminamikun/Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15/data/coordinates_2")
write.csv(coordinate_2, "/Users/ouminamikun/Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15/data/coordinates_2")
agg <- aggregate(crimes[,-c(1:6)], list(crimes$Survey.year), sum)
View(agg)
crimes <- read.csv("../data/OPE CSS Custom Data 2017-02-12 134856/Criminal_Offenses_On_campus.csv")
for(i in 6:19){
as.numeric(crimes[,i])
}
##calculate total crimes for every year
crimes$total <- rowSums(crimes[,-c(1:6)],na.rm = TRUE)
crimes.split <- split(crimes, f = as.factor(crimes$Survey.year))
year.sum <- NA
for(i in 1: length(crimes.split)){
year.sum[i] <- sum(crimes.split[[i]]$total)
}
#calculate every type of crimes for every year
agg <- aggregate(crimes[,-c(1:6)], list(crimes$Survey.year), sum)
View(crimes)
crimes[,crimes$Institution.name == "Purdue University"]

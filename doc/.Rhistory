yloess5 <- loess.wrapper(x, y, span.vals = seq(0.05, 0.5, by = 0.05), folds = 5)
yloess5 <- loess.wrapper(x, y, span.vals = seq(0.25, 1, by = 0.05), folds = 5)
h.optimal <- yloess5$s
h.optimal
plot(x, y, type = "p")
lines(x, yloess5$fitted, type = "l")
plot(x, y, type = "p")
lines(sort(x), fitted(yloess5)[order(x)], type = "l")
curve((1+x)^2 + (2-y)^2 = 4, from = -10, to = 10)
install.packages("glmnet")
library(MASS)
library(glmnet)
train3 <- read.table("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ML/HW/Assignment_2/train_3.txt", header = F)
train5 <- read.table("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ML/HW/Assignment_2/train_5.txt", header = F)
train8 <- read.table("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ML/HW/Assignment_2/train_8.txt", header = F)
test <- read.table("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ML/HW/Assignment_2/zip_test.txt", header = F)
View(test)
names(test) <- c("y", names(test))[1:257]
View(test)
test <- test$y%in%c(3,5,8)
test$y%in%c(3,5,8)
test <- read.table("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ML/HW/Assignment_2/zip_test.txt", header = F)
names(test) <- c("y", names(test))[1:257]
test <- test[test$y%in%c(3,5,8),]
View(train3)
library(MASS)
library(glmnet)
train3 <- read.table("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ML/HW/Assignment_2/train_3.txt", header = F,sep = ",")
train5 <- read.table("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ML/HW/Assignment_2/train_5.txt", header = F, sep = ",")
train8 <- read.table("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ML/HW/Assignment_2/train_8.txt", header = F, sep = ",")
test <- read.table("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ML/HW/Assignment_2/zip_test.txt", header = F)
names(test) <- c("y", names(test))[1:257]
test <- test[test$y%in%c(3,5,8),]
d.f <- rbind(train3,train5, train8)
View(d.f)
train3$y <- 3
train5$y <- 5
train8$y <- 8
d.f <- rbind(train3,train5, train8)
View(d.f)
View(d.f)
library(MASS)
library(glmnet)
train3 <- read.table("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ML/HW/Assignment_2/train_3.txt", header = F,sep = ",")
train5 <- read.table("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ML/HW/Assignment_2/train_5.txt", header = F, sep = ",")
train8 <- read.table("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ML/HW/Assignment_2/train_8.txt", header = F, sep = ",")
test <- read.table("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ML/HW/Assignment_2/zip_test.txt", header = F)
names(test) <- c("y", names(test))[1:257]
test <- test[test$y%in%c(3,5,8),]
train3$y <- 3
train5$y <- 5
train8$y <- 8
d.f <- rbind(train3,train5, train8)
View(d.f)
head(d.f)
library(leaps)
lda1 <- lda(y~., data = d.f)
lda1 <- lda(y~., data = d.f)
mat <- (NA, 4,2)
mat <- matrix(NA, 4,2)
mat[1,1]=mean(predict(lad1,d.f)$class == d$y)
lda1 <- lda(y~., data = d.f)
mat <- matrix(NA, 4,2)
mat[1,1]=mean(predict(lda1,d.f)$class == d$y)
mat <- matrix(NA, 4,2)
mat[1,1]=mean(predict(lda1,d.f)$class == d.f$y)
mat[1,2]=mean(predict(lda1,test)$class == test$y)
mat
prc  <- prcomp(d.f[1:256], scale. = T)
std.prc  <- prc$sdev
var.prc <- std.prc^2
prop <- var.prc/sum(var.prc)
plot(prop, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
train.prc <- data.frame(y = d.f$y, prc$x)[,1:50]
lda.prc=lda(y~.,data=train.prc )
mat[2,1]=mean(predict(lad.prc,train.prc)$class == d.f$y)
mat[2,1]=mean(predict(lda.prc,train.prc)$class == d.f$y)
test.pca=as.data.frame(y = test$y,predict(prc, newdata =test[,-1] ))[,1:50]
mat[2,2]=mean(predict(lad.prc,test.prc)$class == test$y)
mat[2,2]=mean(predict(lda.prc,test.prc)$class == test$y)
test.prc=as.data.frame(y = test$y,predict(prc, newdata =test[,-1] ))[,1:50]
mat[2,2]=mean(predict(lda.prc,test.prc)$class == test$y)
mat
d.f.mean <- matrix(NA,dim(d.f)[1], 64)
for( i in 1:dim(d.f)[1])
{
mat2 <- matrix( d.f[i,1:256],16,16,byrow=T)
mat3 <- <- matrix(NA,8,8)
d.f.mean <- matrix(NA,dim(d.f)[1], 64)
for( i in 1:dim(d.f)[1])
{
mat2 <- matrix( d.f[i,1:256],16,16,byrow=T)
mat3 <- matrix(NA,8,8)
for( k in 1:8)
for( t in 1:8)
{
mat3[k,t]=mean(   unlist (mat2[2*k-0:1, 2*t-0:1] )   )
}
d.f.mean[i,]=c(c(mat2))
}
d.mean=matrix(NA,dim(d.f)[1], 64)
for( i in 1:dim(d.f)[1])
{
mat=matrix( d[i,1:256],16,16,byrow=T)
matrix.4=matrix(NA,8,8)
for( k in 1:8)
for( t in 1:8)
{
matrix.4[k,t]=mean(   unlist (mat[2*k-0:1, 2*t-0:1] )   )
}
d.mean[i,]=c(c(matrix.4))
}
d.mean=matrix(NA,dim(d.f)[1], 64)
for( i in 1:dim(d.f)[1])
{
mat=matrix( d.f[i,1:256],16,16,byrow=T)
matrix.4=matrix(NA,8,8)
for( k in 1:8)
for( t in 1:8)
{
matrix.4[k,t]=mean(   unlist (mat[2*k-0:1, 2*t-0:1] )   )
}
d.mean[i,]=c(c(matrix.4))
}
d.mean=data.frame(d.mean)
d.mean$y=d.f$y
test.mean=matrix(NA,dim(test)[1], 64)
for( i in 1:dim(test)[1])
{
mat=matrix( test[i,-1],16,16,byrow=T)
matrix.4=matrix(NA,8,8)
for( k in 1:8)
for( t in 1:8)
{
matrix.4[k,t]=mean(   unlist (mat[2*k-0:1, 2*t-0:1] )   )
}
test.mean[i,]=c(c(matrix.4))
}
test.mean=data.frame(test.mean)
test.mean$y=test$y[i]
lad.4mean=lda(y~.,data=d.mean)
mat[3,1]=mean(predict(lad.4mean,d.mean)$class == d.f$y)
mat[3,2]=mean(predict(lad.4mean,test.mean)$class == test$y)
x_train=as.matrix(d.mean[,1:64])
y_train=factor(d.f$y)
x_test=as.matrix(test.mean[,1:64])
y_test=factor(test$y,levels=levels(y_train))
fit=glmnet(x=x_train,y=y_train,  family="multinomial" )
L=predict(fit,x_train,type="response",s=0.01)[,,1]
predict_train=c()
for(i in 1:dim(L)[1])
predict_train[i]= levels(y_train) [which( L[i,]==max(L[i,]))]
mat[4,1]=mean(predict_train==y_train)
L2=predict(fit,x_test,type="response",s=0.01)[,,1]
predict_test=c()
for(i in 1:dim(L2)[1])
predict_test[i]= levels(y_test) [which( L2[i,]==max(L2[i,])  )]
mat[4,2]=mean(predict_test==y_test)
print(mat)
d3=read.table("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ML/HW/Assignment_2/train_3.txt",header = F,sep=',')
d5=read.table("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ML/HW/Assignment_2/train_5.txt",header = F,sep=',')
library(MASS)
library(glmnet)
d8=read.table("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ML/HW/Assignment_2/train_8.txt",header = F,sep=',')
test=read.table("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ML/HW/Assignment_2/zip_test.txt",header = F)
names(test)=c("y",names(test))[1:257]
test=test[test$y%in%c(3,5,8),]
acc=matrix(NA,4,2)
d3$y=3
d5$y=5
d8$y=8
d=rbind(d3,d5,d8)
lad.full=lda(y~.,data=d)
acc[1,1]=mean(predict(lad.full,d)$class == d$y)
acc[1,2]=mean(predict(lad.full,test)$class == test$y)
prin_comp=prcomp(d[1:256], scale. = T)
std_dev = prin_comp$sdev
pr_var <- std_dev^2
prop_varex <- pr_var/sum(pr_var)
plot(prop_varex, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
type = "b")
train.pca <- data.frame(y = d$y, prin_comp$x)[,1:50]
lad.pca=lda(y~.,data=train.pca )
acc[2,1]=mean(predict(lad.pca,train.pca)$class == d$y)
test.pca=as.data.frame(y = test$y,predict(prin_comp, newdata =test[,-1] ))[,1:50]
acc[2,2]=mean(predict(lad.pca,test.pca)$class == test$y)
d.mean=matrix(NA,dim(d)[1], 64)
for( i in 1:dim(d)[1])
{
mat=matrix( d[i,1:256],16,16,byrow=T)
matrix.4=matrix(NA,8,8)
for( k in 1:8)
for( t in 1:8)
{
matrix.4[k,t]=mean(   unlist (mat[2*k-0:1, 2*t-0:1] )   )
}
d.mean[i,]=c(c(matrix.4))
}
d.mean=data.frame(d.mean)
d.mean$y=d$y
test.mean=matrix(NA,dim(test)[1], 64)
for( i in 1:dim(test)[1])
{
mat=matrix( test[i,-1],16,16,byrow=T)
matrix.4=matrix(NA,8,8)
for( k in 1:8)
for( t in 1:8)
{
matrix.4[k,t]=mean(   unlist (mat[2*k-0:1, 2*t-0:1] )   )
}
test.mean[i,]=c(c(matrix.4))
}
test.mean=data.frame(test.mean)
test.mean$y=test$y[i]
lad.4mean=lda(y~.,data=d.mean)
acc[3,1]=mean(predict(lad.4mean,d.mean)$class == d$y)
acc[3,2]=mean(predict(lad.4mean,test.mean)$class == test$y)
x_train=as.matrix(d.mean[,1:64])
y_train=factor(d$y)
x_test=as.matrix(test.mean[,1:64])
y_test=factor(test$y,levels=levels(y_train))
fit=glmnet(x=x_train,y=y_train,  family="multinomial" )
L=predict(fit,x_train,type="response",s=0.01)[,,1]
predict_train=c()
for(i in 1:dim(L)[1])
predict_train[i]= levels(y_train) [which( L[i,]==max(L[i,]))]
acc[4,1]=mean(predict_train==y_train)
L2=predict(fit,x_test,type="response",s=0.01)[,,1]
predict_test=c()
for(i in 1:dim(L2)[1])
predict_test[i]= levels(y_test) [which( L2[i,]==max(L2[i,])  )]
acc[4,2]=mean(predict_test==y_test)
print(acc)
packages.used=c("tm", "wordcloud", "RColorBrewer",
"dplyr", "tidytext")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE,
repos='http://cran.us.r-project.org')
}
library(tm)
library(wordcloud)
library(RColorBrewer)
library(dplyr)
library(tidytext)
folder.path="../data/inaugurals/"
speeches=list.files(path = folder.path, pattern = "*.txt")
prex.out=substr(speeches, 6, nchar(speeches)-4)
ff.all<-Corpus(DirSource(folder.path))
inspect(ff.all[1])
shools <- list.files(path = "../data/Ranking/", pattern = "*.cvs")
schools
schools <- list.files(path = "../data/Ranking/", pattern = "*.csv")
schools
schools.list <- list.files(path = "../data/Ranking/", pattern = "*.csv")
schools <- lapply(schools.list, read.csv)
schools.list <- paste("..data/Ranking/", schools.list, sep = "")
schools <- lapply(schools.list, read.csv)
crimes <- read.csv("../data/OPE CSS Custom Data 2017-02-12 134856/Criminal_Offenses_On_campus.csv")
for(i in 6:19){
as.numeric(crimes[,i])
}
schools.list <- list.files(path = "../data/Ranking/", pattern = "*.csv")
schools.list <- paste("..data/Ranking/", schools.list, sep = "")
schools <- lapply(schools.list, read.csv)
schools.list <- list.files(path = "../data/Ranking/", pattern = "*.csv")
schools.list <- paste("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15/data/Ranking/", schools.list, sep = "")
schools <- lapply(schools.list, read.csv)
schools
class(schools[[1]])
schools
schools.list
schools.list <- list.files(path = "../data/Ranking/", pattern = "*.csv")
schools.list
??getUrls
enrollment <- c(9181, 2209, 12587, 27589, 21679, 6298, 15865, 14769, 17858, 28791, 21372, 11319, 21554, 8808, 6621, 16963, 10907, 37565, 41845, 15097,43625, 29135, 12179, 24806, 42453, 23732, 12686, 7788, 14348, 12336)
length(enrollment)
for(i in 1:30){
schools[[i]]$enrollment <- enrollment[i]
}
head(schools)
head(schools[[1]])
##read in all universities files
schools.list <- list.files(path = "../data/Ranking/", pattern = "*.csv")
schools.list <- paste("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15/data/Ranking/", schools.list, sep = "")
schools <- lapply(schools.list, read.csv)
years
years <- as.integer(2001:2014)
years
crimes <- read.csv("../data/OPE CSS Custom Data 2017-02-12 134856/Criminal_Offenses_On_campus.csv")
for(i in 6:19){
as.numeric(crimes[,i])
}
##calculate total crimes for every year
crimes$total <- rowSums(crimes[,-c(1:6)],na.rm = TRUE)
crimes.split <- split(crimes, f = as.factor(crimes$Survey.year))
year.sum <- NA
for(i in 1: length(crimes.split)){
year.sum[i] <- sum(crimes.split[[i]]$total)
}
#calculate every type of crimes for every year
agg <- aggregate(crimes[,-c(1:6)], list(crimes$Survey.year), sum)
View(agg)
mat <- matrix(NA)
for(i in 1:30){
for(j in 1:14){
boolean <- schools[[i]]$Survey.year == years[j]
mat[j,i+1] <- colSums(schools[[i]][boolean,][,-c(1:6)])
}
}
for(i in 30){
schools[[i]]$total <- rowsum(schools[[i]][,-c(1:6)])
}
for(i in 30){
schools[[i]]$total <- rowSums(schools[[i]][,-c(1:6)], na.rm = T)
}
head(schools[[1]])
##read in all universities files
schools.list <- list.files(path = "../data/Ranking/", pattern = "*.csv")
schools.list <- paste("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15/data/Ranking/", schools.list, sep = "")
schools <- lapply(schools.list, read.csv)
years <- as.integer(2001:2014)
for(i in 30){
schools[[i]]$total <- rowSums(schools[[i]][,-c(1:6)], na.rm = T)
}
head(schools[[1]])
rowSums(schools[[1]][,-c(1:6)])
rowSums(schools[[1]][,-c(1:6)], na.rm = T)
for(i in 30){
schools[[i]]$total <- rowSums(schools[[i]][,-c(1:6)], na.rm = T)
}
schools[[1]]$Arson
schools[[1]]$total <- rowSums(schools[[1]][,-c(1:6)], na.rm = T)
schools[[1]]$total
head(schools[[1]])
head(schools[[2]])
datatable(sample_n(crimes, 50))
??datatable
library(DT)
datatable(sample_n(crimes, 50))
library(shiny)
?runExample
runExample("01_hello")
?selectInput
data.frame(schools)
schools <- sapply(schools.list, read.csv)
head(schools)
View(schools)
library(plyr)
schools <- ddply(schools.list, read.csv)
schools.list <- list.files(path = "../data/Ranking/", pattern = "*.csv")
schools.list <- paste("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15/data/Ranking/", schools.list, sep = "")
schools <- ddply(schools.list, read.csv)
schools <- lapply(schools.list, read.csv)
ldply(schools)
d.schools <- ldply(schools)
head
head(d.schools)
agg1 <- aggregate(d.schools[,-c(1:6)], list(d.schools$Survey.year, d.schools$Institution.name), rowSums)
agg1 <- aggregate(d.schools[,-c(1:6)], list(d.schools$Survey.year, d.schools$Institution.name), sum)
View(agg)
View(agg1)
for(i in 1:30){
schools[[i]]$total <- rowSums(schools[[i]][,-c(1:6)], na.rm = T)
}
head(schools[[1]])
View(d.schools)
agg1 <- aggregate(d.schools[,-c(1:6)], list(d.schools$Survey.year, d.schools$Institution.name, d.schools[,-c(1:6)]), colSums)
View(agg1)
agg1 <- aggregate(d.schools[,-c(1:6)], list(d.schools$Survey.year, d.schools$Institution.name, sum)
years <- as.integer(2001:2014)
agg1 <- aggregate(d.schools[,-c(1:6)], list(d.schools$Survey.year, d.schools$Institution.name, sum))
agg1 <- aggregate(d.schools[,-c(1:6)], list(d.schools$Survey.year, d.schools$Institution.name), sum)
View(agg1)
View(agg1)
for(i in 1:30){
schools[[i]]$total <- rowSums(schools[[i]][,-c(1:6)], na.rm = T)
}
d.shcools <- ldply(schools)
#calulate the num of every type of crime for each institution every year
agg1 <- aggregate(d.schools[,-c(1:6)], list(d.schools$Survey.year, d.schools$Institution.name), sum)
View(agg1)
names(col(d.schools))
colnames(d.schools)
colnames(d.shcools)
##read in all universities files
schools.list <- list.files(path = "../data/Ranking/", pattern = "*.csv")
schools.list <- paste("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15/data/Ranking/", schools.list, sep = "")
schools <- lapply(schools.list, read.csv)
#calculate total crimes for each campus
for(i in 1:30){
schools[[i]]$total <- rowSums(schools[[i]][,-c(1:6)], na.rm = T)
}
d.shcools <- ldply(schools)
#calulate the num of every type of crime for each institution every year
agg1 <- aggregate(d.schools[,-c(1:6)], list(d.schools$Survey.year, d.schools$Institution.name), sum)
d.schools <- ldply(schools)
agg1 <- aggregate(d.schools[,-c(1:6)], list(d.schools$Survey.year, d.schools$Institution.name), sum)
View(agg1)
library(shiny)
ui <- fluidPage(
titlePanel("Compare Data for Two Schools"),
fluidRow(style = "padding-bottom: 20px;",
column(4, selectInput('school1', 'School 1',
schools.list,
selected=schools.list[1])),
column(4, selectInput('school2', 'School 2', schools.list,
selected=schools.list[9]))
),
fluidRow(
plotOutput('trend', height = "400px")
)
)
shinyApp(ui = ui)
shinyApp(ui = ui, server = NULL)
View(agg1)
enrollment
enrollment1 <- rep(enrollment, 14)
head(enrollment)
aggregate(d.schools$Institution.Size, list(d.schools$Survey.year))
dim(schools)
dim(d.schools)
for(i in 1:dim(d.schools)[1]){
enrollment <- rep(enrollment[i], 14)
}
head(enrollment)
enrollment <- c(9181, 2209, 12587, 27589, 21679, 6298, 15865, 14769, 17858, 28791, 21372, 11319, 21554  ,8808, 6621, 16963,10907, 37565, 41845, 15097, 43625, 29135, 12179, 24806, 42453, 23732, 12686, 7788, 14348, 12336)
sapply(enrollment, rep, 14)
length(years)
enrollment <- as.vector(sapply(enrollment, rep, 14))
enrollment
agg1$institution.size <- enrollment
View(agg1)
library(DT)
library(plyr)
crimes <- read.csv("../data/OPE CSS Custom Data 2017-02-12 134856/Criminal_Offenses_On_campus.csv")
for(i in 6:19){
as.numeric(crimes[,i])
}
datatable(sample_n(crimes, 50))
##calculate total num of crimes for every year
crimes$total <- rowSums(crimes[,-c(1:6)],na.rm = TRUE)
crimes.split <- split(crimes, f = as.factor(crimes$Survey.year))
year.sum <- NA
for(i in 1: length(crimes.split)){
year.sum[i] <- sum(crimes.split[[i]]$total)
}
#calculate num of every type of crimes for every year
agg <- aggregate(crimes[,-c(1:6)], list(crimes$Survey.year), sum)
##read in all universities files
schools.list <- list.files(path = "../data/Ranking/", pattern = "*.csv")
schools.list <- paste("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15/data/Ranking/", schools.list, sep = "")
schools <- lapply(schools.list, read.csv)
#calculate total crimes for each campus
for(i in 1:30){
schools[[i]]$total <- rowSums(schools[[i]][,-c(1:6)], na.rm = T)
}
#calulate the num of every type of crime for each institution every year
d.schools <- ldply(schools)
agg1 <- aggregate(d.schools[,-c(1:6)], list(d.schools$Survey.year, d.schools$Institution.name), sum)
enrollment <- c(9181, 2209, 12587, 27589, 21679, 6298, 15865, 14769, 17858, 28791, 21372, 11319, 21554  ,8808, 6621, 16963,10907, 37565, 41845, 15097, 43625, 29135, 12179, 24806, 42453, 23732, 12686, 7788, 14348, 12336)
enrollment <- as.vector(sapply(enrollment, rep, 14))
agg1$institution.size <- enrollment
schools2014 <- d.schools[d.shcools$Survey.year == "2014",]
View(schools2014)
?sample_n
table <- datatable(sample_n(schools2014))
table <- datatable(sample_n(schools2014, 50))
table
View(agg1)
schools2014 <- agg1[agg1$Group.1 == "2014",]
table <- datatable(sample_n(schools2014, 50))
table <- datatable(sample_n(schools2014, 30))
table
View(schools2014)
?dataTableOutput
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("Compare Data for Two Schools"),
# Create a new Row in the UI for selectInputs
fluidRow(
column(4,
selectInput("school",
"School:",
c("All",
unique(as.character(schools2014$Group.2))))
)
),
# Create a new row for the table.
fluidRow(
DT::dataTableOutput("table")
)
)
server <- function(input, output) {
# Filter data based on selections
output$table <- DT::renderDataTable(DT::datatable({
data <- schools2014
if (input$school != "All") {
data <- data[data$Group.2 == input$school,]
}
data
}))
}
shinyApp(ui = ui, server = server)

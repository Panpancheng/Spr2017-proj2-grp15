server <- function(input, output) {
school <- t.schools2014
schools.selected <- reactive({school[, input$show_schools, drop = FALSE]})
output$criminal.offenses <- DT::renderDataTable({
DT::datatable(schools.selected(),
extensions = 'Buttons',
options = list(pageLength = 25, dom = 'Bfrtip', buttons = I('colvis')),
class = "display")
})
output$rate.bar <- renderPlot({
barplot(as.matrix(schools.selected()[dim(schools.selected())[1],]),
col = "pink", xlab = "Schools", ylab = "Crime Rate")
})
school.rows <- reactive( {agg1$Group.2 == input$show_schools})
output$schoolTrend <- renderPlot({
plot(x = c(2001:2014),
y = agg1$total[agg1$Group.2 == unique(input$show_schools)[1]],
type = "lines",
xlab = "Year",
ylab = "Total Crimes",
col = "Red")
lines(x = c(2001:2014),
y = agg1$total[agg1$Group.2 == unique(input$show_schools)[2]],
col = "yellow")
legend("upright", col = c("red", "yellow"), lty = c(1,1))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(plotly)
library(ggplot2)
#################################### Schools Comparision ##############################################
ui <- fluidPage(
titlePanel( 'Compare Data for Multiple Schools'),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = 'show_schools',
label = 'Schools to compare:',
choices = as.character(colnames(t.schools2014)),
selected = as.character(colnames(t.schools2014)[c(1,2)]),
width = "200px"
)
),
mainPanel(
tabsetPanel(
id = 'criminal.offenses',
tabPanel('Criminal Offenses',
DT::dataTableOutput('criminal.offenses'),
plotOutput("rate.bar"),
plotOutput("schoolTrend")))
)
)
)
server <- function(input, output) {
school <- t.schools2014
schools.selected <- reactive({school[, input$show_schools, drop = FALSE]})
output$criminal.offenses <- DT::renderDataTable({
DT::datatable(schools.selected(),
extensions = 'Buttons',
options = list(pageLength = 25, dom = 'Bfrtip', buttons = I('colvis')),
class = "display")
})
output$rate.bar <- renderPlot({
barplot(as.matrix(schools.selected()[dim(schools.selected())[1],]),
col = "pink", xlab = "Schools", ylab = "Crime Rate")
})
school.rows <- reactive( {agg1$Group.2 == input$show_schools})
output$schoolTrend <- renderPlot({
plot(x = c(2001:2014),
y = agg1$total[agg1$Group.2 == unique(input$show_schools)[1]],
type = "lines",
xlab = "Year",
ylab = "Total Crimes",
col = "Red")
lines(x = c(2001:2014),
y = agg1$total[agg1$Group.2 == unique(input$show_schools)[2]],
col = "yellow")
legend("upright", col = c("red", "yellow"), lty = c(1,1),
legend = c(unique(input$show_schools)[1], unique(input$show_schools)[2]))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(plotly)
library(ggplot2)
#################################### Schools Comparision ##############################################
ui <- fluidPage(
titlePanel( 'Compare Data for Multiple Schools'),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = 'show_schools',
label = 'Schools to compare:',
choices = as.character(colnames(t.schools2014)),
selected = as.character(colnames(t.schools2014)[c(1,2)]),
width = "200px"
)
),
mainPanel(
tabsetPanel(
id = 'criminal.offenses',
tabPanel('Criminal Offenses',
DT::dataTableOutput('criminal.offenses'),
plotOutput("rate.bar"),
plotOutput("schoolTrend")))
)
)
)
server <- function(input, output) {
school <- t.schools2014
schools.selected <- reactive({school[, input$show_schools, drop = FALSE]})
output$criminal.offenses <- DT::renderDataTable({
DT::datatable(schools.selected(),
extensions = 'Buttons',
options = list(pageLength = 25, dom = 'Bfrtip', buttons = I('colvis')),
class = "display")
})
output$rate.bar <- renderPlot({
barplot(as.matrix(schools.selected()[dim(schools.selected())[1],]),
col = "pink", xlab = "Schools", ylab = "Crime Rate")
})
school.rows <- reactive( {agg1$Group.2 == input$show_schools})
output$schoolTrend <- renderPlot({
plot(x = c(2001:2014),
y = agg1$total[agg1$Group.2 == unique(input$show_schools)[1]],
type = "lines",
xlab = "Year",
ylab = "Total Crimes",
col = "Red")
lines(x = c(2001:2014),
y = agg1$total[agg1$Group.2 == unique(input$show_schools)[2]],
col = "yellow")
legend("topright", col = c("red", "yellow"), lty = c(1,1),
legend = c(unique(input$show_schools)[1], unique(input$show_schools)[2]))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(plotly)
library(ggplot2)
#################################### Schools Comparision ##############################################
ui <- fluidPage(
titlePanel( 'Compare Data for Multiple Schools'),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = 'show_schools',
label = 'Schools to compare:',
choices = as.character(colnames(t.schools2014)),
selected = as.character(colnames(t.schools2014)[c(1,2)]),
width = "200px"
)
),
mainPanel(
tabsetPanel(
id = 'criminal.offenses',
tabPanel('Criminal Offenses',
DT::dataTableOutput('criminal.offenses'),
plotOutput("rate.bar"),
plotOutput("schoolTrend")))
)
)
)
server <- function(input, output) {
school <- t.schools2014
schools.selected <- reactive({school[, input$show_schools, drop = FALSE]})
output$criminal.offenses <- DT::renderDataTable({
DT::datatable(schools.selected(),
extensions = 'Buttons',
options = list(pageLength = 25, dom = 'Bfrtip', buttons = I('colvis')),
class = "display")
})
output$rate.bar <- renderPlot({
barplot(as.matrix(schools.selected()[dim(schools.selected())[1],]),
col = "pink", xlab = "Schools", ylab = "Crime Rate")
})
school.rows <- reactive( {agg1$Group.2 == input$show_schools})
output$schoolTrend <- renderPlot({
plot(x = c(2001:2014),
y = agg1$total[agg1$Group.2 == unique(input$show_schools)[1]],
type = "lines",
xlab = "Year",
ylab = "Total Crimes",
col = "Red")
lines(x = c(2001:2014),
y = agg1$total[agg1$Group.2 == unique(input$show_schools)[2]],
col = "blue")
legend("topright", col = c("red", "blue"), lty = c(1,1),
legend = c(unique(input$show_schools)[1], unique(input$show_schools)[2]))
})
}
shinyApp(ui = ui, server = server)
?col
library(shiny)
library(plotly)
library(ggplot2)
#################################### Schools Comparision ##############################################
ui <- fluidPage(
titlePanel( 'Compare Data for Multiple Schools'),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = 'show_schools',
label = 'Schools to compare:',
choices = as.character(colnames(t.schools2014)),
selected = as.character(colnames(t.schools2014)[c(1,2)]),
width = "200px"
)
),
mainPanel(
tabsetPanel(
id = 'criminal.offenses',
tabPanel('Criminal Offenses',
DT::dataTableOutput('criminal.offenses'),
plotOutput("rate.bar"),
plotOutput("schoolTrend")))
)
)
)
server <- function(input, output) {
school <- t.schools2014
schools.selected <- reactive({school[, input$show_schools, drop = FALSE]})
output$criminal.offenses <- DT::renderDataTable({
DT::datatable(schools.selected(),
extensions = 'Buttons',
options = list(pageLength = 25, dom = 'Bfrtip', buttons = I('colvis')),
class = "display")
})
output$rate.bar <- renderPlot({
barplot(as.matrix(schools.selected()[dim(schools.selected())[1],]),
col = "pink", xlab = "Schools", ylab = "Crime Rate")
})
school.rows <- reactive( {agg1$Group.2 == input$show_schools})
output$schoolTrend <- renderPlot({
plot(x = c(2001:2014),
y = agg1$total[agg1$Group.2 == unique(input$show_schools)[1]],
type = "lines",
xlab = "Year",
ylab = "Total Crimes",
col = "Red")
lines(x = c(2001:2014),
y = agg1$total[agg1$Group.2 == unique(input$show_schools)[2]],
col = "skyblue")
legend("topright", col = c("red", "skyblue"), lty = c(1,1),
legend = c(unique(input$show_schools)[1], unique(input$show_schools)[2]))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(plotly)
library(ggplot2)
#################################### Schools Comparision ##############################################
ui <- fluidPage(
titlePanel( 'Compare Data for Multiple Schools'),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = 'show_schools',
label = 'Schools to compare:',
choices = as.character(colnames(t.schools2014)),
selected = as.character(colnames(t.schools2014)[c(1,2)]),
width = "200px"
)
),
mainPanel(
tabsetPanel(
id = 'criminal.offenses',
tabPanel('Criminal Offenses',
DT::dataTableOutput('criminal.offenses'),
plotOutput("rate.bar"),
plotOutput("schoolTrend")))
)
)
)
server <- function(input, output) {
school <- t.schools2014
schools.selected <- reactive({school[, input$show_schools, drop = FALSE]})
output$criminal.offenses <- DT::renderDataTable({
DT::datatable(schools.selected(),
extensions = 'Buttons',
options = list(pageLength = 25, dom = 'Bfrtip', buttons = I('colvis')),
class = "display")
})
output$rate.bar <- renderPlot({
barplot(as.matrix(schools.selected()[dim(schools.selected())[1],]),
col = "pink", xlab = "Schools", ylab = "Crime Rate")
})
school.rows <- reactive( {agg1$Group.2 == input$show_schools})
output$schoolTrend <- renderPlot({
plot(x = c(2001:2014),
y = agg1$total[agg1$Group.2 == unique(input$show_schools)[1]],
type = "lines",
xlab = "Year",
ylab = "Total Crimes",
col = "Red")
lines(x = c(2001:2014),
y = agg1$total[agg1$Group.2 == unique(input$show_schools)[2]],
col = "blue")
legend("topright", col = c("red", "blue"), lty = c(1,1),
legend = c(unique(input$show_schools)[1], unique(input$show_schools)[2]))
})
}
shinyApp(ui = ui, server = server)
install.packages("leaflet")
library(leaflet)
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
ui <- fluidPage(
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
)
server <- function(input, output, session) {
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addMarkers(data = points())
})
}
shinyApp(ui, server)
library(ggplot2)
library(ggthemes)
install.packages("ggthemes")
library(ggplot2)
library(ggthemes)
library(ggmap)
## Total Crimes on Campus in U.S.
crimes <- read.csv("../data/OPE CSS Custom Data 2017-02-12 134856/Criminal_Offenses_On_campus.csv")
## Get Unique Campus Names
length(unique(crimes$Institution.name))
# campus_1 <- as.character(unique(crimes$Institution.name))[1:960] # chenyun
# campus_2 <- as.character(unique(crimes$Institution.name))[961:1921] # nanjun
# campus_3 <- as.character(unique(crimes$Institution.name))[1922:2884] # yuxin
## To run the following code takes a long time so we run seperately and save it to a file named "All_Coordinate"
# coordinate_1 <- geocode(campus_1)
# coordinate_2 <- geocode(campus_2)
# coordinate_3 <- geocode(campus_3)
coordinate <- read.csv("../data/All_Coordinate.csv")
coordinate <- coordinate[,-1]
campus <- unique(crimes$Institution.name)
campus <- cbind(campus, coordinate)
## Check the missing value and search for the longitude & latitude manually
na.index <- which(is.na(campus[,2]))
campus[31, 2:3] <- geocode("alfred university")
campus[43, 2:3] <- geocode("American Baptist College")
campus[178, 2:3] <- c(-85.1892, 34.2904)
campus[194, 2:3] <- geocode(as.character(campus[194,1]))
campus[253, 2:3] <- geocode(as.character(campus[253,1]))
na.index <- which(is.na(campus[,2]))
for (i in na.index){
campus[i, 2:3] <- geocode(as.character(campus[i,1]))
}
which(is.na(campus[,2]))
campus[924, 2:3] <- c(-81.3626, 28.3025)
campus[2376, 2:3] <- c(-77.6493, 39.9492)
## Delete the campus we cannot even find the location manually
campus <- campus[-c(710,945,1121,1340,1531,2797),]
## Check NA value
sum(is.na(campus[,2:3]))
## Update dataframe crimes as well
unselect <- unique(crimes$Institution.name)[c(710,945,1121,1340,1531,2797)]
new_crimes <- crimes[! crimes$Institution.name %in% unselect,]
#write.csv(coordinate_3,file="test3.csv")
# which(is.na(coordinate)) some of them are NA
## Get U.S. Map
map <- get_map(location = "united states", zoom = 4, maptype = "toner",source = "stamen")
## Plot the All researched Campus Locations
campus_map = ggmap(map, base_layer = ggplot(aes(x = lon, y = lat), data = campus)) + geom_point(color = 2, alpha = 1)
campus_map
## Total crimes for each campus
new_crimes$sub_total <- rowSums(new_crimes[, 7:19], na.rm = T)
## Remove campus that have no reports of crimes all these year
all_year_ttl <- aggregate(new_crimes$sub_total, by = list(new_crimes$Institution.name), FUN = sum)
colnames(all_year_ttl) <- c("Institution.name", "Total")
ttl_zero <- as.vector(all_year_ttl$Institution.name[which(all_year_ttl$Total == 0)])
new_all_year_ttl <- all_year_ttl[! all_year_ttl$Institution.name %in% ttl_zero,]
new_campus <- campus[campus$campus %in% new_all_year_ttl$Institution.name,]
final_crimes <- new_crimes[new_crimes$Institution.name %in% new_all_year_ttl$Institution.name,]
table(new_all_year_ttl$Institution.name %in% new_campus$campus)
## Sort the data frames by alphabetic order of campus name
new_all_year_ttl <- new_all_year_ttl[order(new_all_year_ttl$Institution.name), ]
new_campus <- new_campus[order(new_campus$campus),]
all.equal(new_all_year_ttl$Institution.name, new_campus$campus)
## All year total crime for each campus
new_campus$total <- new_all_year_ttl$Total
## Append institution size
size <- aggregate(final_crimes$sub_total, by = list(final_crimes$Institution.name, final_crimes$Institution.Size), FUN = sum)
order_size <- size[order(size$Group.1),]
names(order_size) <- c("insti.name", "size")
final_size <- aggregate(order_size$size, by = list(order_size$insti.name), FUN = sum)
all.equal(final_size$Group.1, new_campus$campus)
new_campus$pop <- final_size$x
new_campus$rate <- new_campus$total / new_campus$pop
View(coordinate)
View(train8)
head(map)
View(new_campus)
dim(new_campus)[1]
######################################### Schools pick ###############################################
ui <- fluidPage(
leafletOutput("school_map")
)
server <- function(input, output){
output$school_map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addMarkers(lng=new_campus[,2], lat=new_campus[,3], popup=as.character(new_campus[,1]))
})
}
shinyApp(ui, server)
######################################### Schools pick ###############################################
ui <- fluidPage(
leafletOutput("school_map")
)
server <- function(input, output){
output$school_map <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addMarkers(lng=new_campus[,2], lat=new_campus[,3], popup=as.character(new_campus[,1]))
})
}
shinyApp(ui, server)
#######################################Combination#################################################
library(shinydashboard)
shinyUI(dashboardPage(
# Application title
dashboardHeader(title = "US Crime Data App"),
# Sidebar
dashboardSidebar(
sidebarMenu(
menuItem("US Crime Map", tabName = "crime_map", icon = icon("globe"),badgeColor='light-blue'),
menuItem("CA Crime Map", tabName = 'ca_map', icon = icon('globe'),badgeColor='red')
)
),
# Body
dashboardBody(
tabItems(
# tab-item one: state crime map
tabItem(tabName = "crime_map",
fluidRow(box(htmlOutput("title1"),width=12,background='light-blue')),
fluidRow(infoBoxOutput("maxbox"),
infoBoxOutput("medbox"),
infoBoxOutput("minbox")),
fluidRow(htmlOutput("map"), title='US Crime Colored Map'),
fluidRow(
column(10,
sliderInput("Year",
label = "Choose year:",min=2001,max=2014,value=2008,animate=T)
)
)
),
# tab-item two: ca crime map
tabItem(tabName = "ca_map",
fluidRow(box(plotOutput("camap"),width = 12,background='navy')),
fluidRow(
column(10,
sliderInput("YEAR",
label="Choose your Year",min=2006,max=2015,value=2008,animate=T))
)
)
)
)
))
state_crimes <- read.csv("CrimeStatebyState-clean.csv",header=T)
#######################################Combination#################################################
library(shinydashboard)
shinyUI(dashboardPage(
# Application title
dashboardHeader(title = "US Crime Data App"),
# Sidebar
dashboardSidebar(
sidebarMenu(
menuItem("US Crime Map", tabName = "crime_map", icon = icon("globe"),badgeColor='light-blue'),
menuItem("CA Crime Map", tabName = 'ca_map', icon = icon('globe'),badgeColor='red')
)
),
# Body
dashboardBody(
tabItems(
# tab-item one: state crime map
tabItem(tabName = "crime_map",
fluidRow(box(htmlOutput("title1"),width=12,background='light-blue')),
fluidRow(infoBoxOutput("maxbox"),
infoBoxOutput("medbox"),
infoBoxOutput("minbox")),
fluidRow(htmlOutput("map"), title='US Crime Colored Map'),
fluidRow(
column(10,
sliderInput("Year",
label = "Choose year:",min=2001,max=2014,value=2008,animate=T)
)
)
),
# tab-item two: ca crime map
tabItem(tabName = "ca_map",
fluidRow(box(plotOutput("camap"),width = 12,background='navy')),
fluidRow(
column(10,
sliderInput("YEAR",
label="Choose your Year",min=2006,max=2015,value=2008,animate=T))
)
)
)
)
))
state_crimes <- read.csv("../data/CrimeStatebyState-clean.csv",header=T)
getwd
getwd()
state_crimes <- read.csv("CrimeStatebyState-clean.csv",header=T)
setwd("~/Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15/data")
state_crimes <- read.csv("CrimeStatebyState-clean.csv",header=T)

sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = 'show_schools',
label = 'Schools to compare:',
choices = as.character(colnames(t.schools2014)),
selected = as.character(colnames(t.schools2014)[c(1,2)]),
width = "200px"
)
),
mainPanel(
tabsetPanel(
id = 'criminal.offenses',
tabPanel('Criminal Offenses',
DT::dataTableOutput('criminal.offenses'),
plotOutput("rate.bar"),
plotOutput("schoolTrend")))
)
)
)
server <- function(input, output) {
school <- t.schools2014
schools.selected <- reactive({school[, input$show_schools, drop = FALSE]})
output$criminal.offenses <- DT::renderDataTable({
DT::datatable(schools.selected(),
extensions = 'Buttons',
options = list(pageLength = 25, dom = 'Bfrtip', buttons = I('colvis')),
class = "display")
})
output$rate.bar <- renderPlot({
barplot(as.matrix(schools.selected()[dim(schools.selected())[1],]),
col = "pink", xlab = "Schools", ylab = "Crime Rate")
})
school.names <- reactive( {unique(input$show_schools)})
output$schoolTrend <- renderPlot({
plot(x = agg1$Group.1[agg1$Group.2 == school.names()[1]],
y = agg1$total[agg1$Group.2 == school.names()[1]],
type = "l",
xlab = "Year",
ylab = "Total Crimes",
col = 1)
lines(x = agg1$Group.1[agg1$Group.2 == school.names()[2]],
y = agg1$total[agg1$Group.2 == school.names()[2]],
col = 2)
lines(x = agg1$Group.1[agg1$Group.2 == school.names()[3]],
y = agg1$total[agg1$Group.2 == school.names()[3]],
col = 3)
legend("topright", col = c(1:length(unique(input$show_schools))),
lty = rep(1,length(unique(input$show_schools))),
legend = unique(input$show_schools))
})
}
shinyApp(ui = ui, server = server)
range(agg1$Group.1)
library(shiny)
library(plotly)
library(ggplot2)
library(leaflet)
#################################### Schools Comparision ############################################
ui <- fluidPage(
titlePanel( 'Compare Data for Multiple Schools'),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = 'show_schools',
label = 'Schools to compare:',
choices = as.character(colnames(t.schools2014)),
selected = as.character(colnames(t.schools2014)[c(1,2)]),
width = "200px"
)
),
mainPanel(
tabsetPanel(
id = 'criminal.offenses',
tabPanel('Criminal Offenses',
DT::dataTableOutput('criminal.offenses'),
plotOutput("rate.bar"),
plotOutput("schoolTrend")))
)
)
)
server <- function(input, output) {
school <- t.schools2014
schools.selected <- reactive({school[, input$show_schools, drop = FALSE]})
output$criminal.offenses <- DT::renderDataTable({
DT::datatable(schools.selected(),
extensions = 'Buttons',
options = list(pageLength = 25, dom = 'Bfrtip', buttons = I('colvis')),
class = "display")
})
output$rate.bar <- renderPlot({
barplot(as.matrix(schools.selected()[dim(schools.selected())[1],]),
col = "pink", xlab = "Schools", ylab = "Crime Rate")
})
school.names <- reactive( {unique(input$show_schools)})
output$schoolTrend <- renderPlot({
xrange <- range(agg1$Group.1)
yrange <- range(agg1$total)
plot(xrange, yrange, type="l", xlab="Years",ylab="Total Crimes")
for(i in 1:length(school.names())){
d <- subset( agg1, agg1$Group.2 == school.names()[i] )
lines(d$Group.1, d$total, col = 1)
legend("topright", col = c(2:length(school.names())),
legend = school.names(), lty = rep(1,length(school.names())))
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(plotly)
library(ggplot2)
library(leaflet)
#################################### Schools Comparision ############################################
ui <- fluidPage(
titlePanel( 'Compare Data for Multiple Schools'),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = 'show_schools',
label = 'Schools to compare:',
choices = as.character(colnames(t.schools2014)),
selected = as.character(colnames(t.schools2014)[c(1,2)]),
width = "200px"
)
),
mainPanel(
tabsetPanel(
id = 'criminal.offenses',
tabPanel('Criminal Offenses',
DT::dataTableOutput('criminal.offenses'),
plotOutput("rate.bar"),
plotOutput("schoolTrend")))
)
)
)
server <- function(input, output) {
school <- t.schools2014
schools.selected <- reactive({school[, input$show_schools, drop = FALSE]})
output$criminal.offenses <- DT::renderDataTable({
DT::datatable(schools.selected(),
extensions = 'Buttons',
options = list(pageLength = 25, dom = 'Bfrtip', buttons = I('colvis')),
class = "display")
})
output$rate.bar <- renderPlot({
barplot(as.matrix(schools.selected()[dim(schools.selected())[1],]),
col = "pink", xlab = "Schools", ylab = "Crime Rate")
})
school.names <- reactive( {unique(input$show_schools)})
output$schoolTrend <- renderPlot({
xrange <- range(agg1$Group.1)
yrange <- range(agg1$total)
plot(xrange, yrange, type="n", xlab="Years",ylab="Total Crimes")
for(i in 1:length(school.names())){
d <- subset( agg1, agg1$Group.2 == school.names()[i] )
lines(d$Group.1, d$total, col = 1)
legend("topright", col = c(2:length(school.names())),
legend = school.names(), lty = rep(1,length(school.names())))
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(plotly)
library(ggplot2)
library(leaflet)
#################################### Schools Comparision ############################################
ui <- fluidPage(
titlePanel( 'Compare Data for Multiple Schools'),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = 'show_schools',
label = 'Schools to compare:',
choices = as.character(colnames(t.schools2014)),
selected = as.character(colnames(t.schools2014)[c(1,2)]),
width = "200px"
)
),
mainPanel(
tabsetPanel(
id = 'criminal.offenses',
tabPanel('Criminal Offenses',
DT::dataTableOutput('criminal.offenses'),
plotOutput("rate.bar"),
plotOutput("schoolTrend")))
)
)
)
server <- function(input, output) {
school <- t.schools2014
schools.selected <- reactive({school[, input$show_schools, drop = FALSE]})
output$criminal.offenses <- DT::renderDataTable({
DT::datatable(schools.selected(),
extensions = 'Buttons',
options = list(pageLength = 25, dom = 'Bfrtip', buttons = I('colvis')),
class = "display")
})
output$rate.bar <- renderPlot({
barplot(as.matrix(schools.selected()[dim(schools.selected())[1],]),
col = "pink", xlab = "Schools", ylab = "Crime Rate")
})
school.names <- reactive( {unique(input$show_schools)})
output$schoolTrend <- renderPlot({
xrange <- range(agg1$Group.1)
yrange <- range(agg1$total)
plot(xrange, yrange, type="n", xlab="Years",ylab="Total Crimes")
for(i in 1:length(school.names())){
d <- subset( agg1, agg1$Group.2 == school.names()[i] )
lines(d$Group.1, d$total, col = i+1)
legend("topright", col = c(2:length(school.names())+1),
legend = school.names(), lty = rep(1,length(school.names())))
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(plotly)
library(ggplot2)
library(leaflet)
#################################### Schools Comparision ############################################
ui <- fluidPage(
titlePanel( 'Compare Data for Multiple Schools'),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = 'show_schools',
label = 'Schools to compare:',
choices = as.character(colnames(t.schools2014)),
selected = as.character(colnames(t.schools2014)[c(1,2)]),
width = "200px"
)
),
mainPanel(
tabsetPanel(
id = 'criminal.offenses',
tabPanel('Criminal Offenses',
DT::dataTableOutput('criminal.offenses'),
plotOutput("rate.bar"),
plotOutput("schoolTrend")))
)
)
)
server <- function(input, output) {
school <- t.schools2014
schools.selected <- reactive({school[, input$show_schools, drop = FALSE]})
output$criminal.offenses <- DT::renderDataTable({
DT::datatable(schools.selected(),
extensions = 'Buttons',
options = list(pageLength = 25, dom = 'Bfrtip', buttons = I('colvis')),
class = "display")
})
output$rate.bar <- renderPlot({
barplot(as.matrix(schools.selected()[dim(schools.selected())[1],]),
col = "pink", xlab = "Schools", ylab = "Crime Rate")
})
school.names <- reactive( {unique(input$show_schools)})
output$schoolTrend <- renderPlot({
xrange <- range(agg1$Group.1)
yrange <- range(agg1$total)
plot(xrange, yrange, type="n", xlab="Years",ylab="Total Crimes")
for(i in 1:length(school.names())){
d <- subset( agg1, agg1$Group.2 == school.names()[i] )
lines(d$Group.1, d$total, col = i)
legend("topright", col = c(1:length(school.names())),
legend = school.names(), lty = rep(1,length(school.names())))
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(plotly)
library(ggplot2)
library(leaflet)
#################################### Schools Comparision ############################################
ui <- fluidPage(
titlePanel( 'Compare Data for Multiple Schools'),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = 'show_schools',
label = 'Schools to compare:',
choices = as.character(colnames(t.schools2014)),
selected = as.character(colnames(t.schools2014)[c(1,2)]),
width = "200px"
)
),
mainPanel(
tabsetPanel(
id = 'criminal.offenses',
tabPanel('Criminal Offenses',
DT::dataTableOutput('criminal.offenses'),
plotOutput("rate.bar"),
plotOutput("schoolTrend")))
)
)
)
server <- function(input, output) {
school <- t.schools2014
schools.selected <- reactive({school[, input$show_schools, drop = FALSE]})
output$criminal.offenses <- DT::renderDataTable({
DT::datatable(schools.selected(),
extensions = 'Buttons',
options = list(pageLength = 25, dom = 'Bfrtip', buttons = I('colvis')),
class = "display")
})
output$rate.bar <- renderPlot({
barplot(as.matrix(schools.selected()[dim(schools.selected())[1],]),
col = "pink", xlab = "Schools", ylab = "Crime Rate")
})
school.names <- reactive( {unique(input$show_schools)})
output$schoolTrend <- renderPlot({
xrange <- range(agg1$Group.1)
yrange <- range(agg1$total) - 200
plot(xrange, yrange, type="n", xlab="Years",ylab="Total Crimes")
for(i in 1:length(school.names())){
d <- subset( agg1, agg1$Group.2 == school.names()[i] )
lines(d$Group.1, d$total, col = i)
legend("topright", col = c(1:length(school.names())),
legend = school.names(), lty = rep(1,length(school.names())))
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(plotly)
library(ggplot2)
library(leaflet)
#################################### Schools Comparision ############################################
ui <- fluidPage(
titlePanel( 'Compare Data for Multiple Schools'),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = 'show_schools',
label = 'Schools to compare:',
choices = as.character(colnames(t.schools2014)),
selected = as.character(colnames(t.schools2014)[c(1,2)]),
width = "200px"
)
),
mainPanel(
tabsetPanel(
id = 'criminal.offenses',
tabPanel('Criminal Offenses',
DT::dataTableOutput('criminal.offenses'),
plotOutput("rate.bar"),
plotOutput("schoolTrend")))
)
)
)
server <- function(input, output) {
school <- t.schools2014
schools.selected <- reactive({school[, input$show_schools, drop = FALSE]})
output$criminal.offenses <- DT::renderDataTable({
DT::datatable(schools.selected(),
extensions = 'Buttons',
options = list(pageLength = 25, dom = 'Bfrtip', buttons = I('colvis')),
class = "display")
})
output$rate.bar <- renderPlot({
barplot(as.matrix(schools.selected()[dim(schools.selected())[1],]),
col = "pink", xlab = "Schools", ylab = "Crime Rate")
})
school.names <- reactive( {unique(input$show_schools)})
output$schoolTrend <- renderPlot({
xrange <- range(agg1$Group.1)
yrange <- c(0:200)
plot(xrange, yrange, type="n", xlab="Years",ylab="Total Crimes")
for(i in 1:length(school.names())){
d <- subset( agg1, agg1$Group.2 == school.names()[i] )
lines(d$Group.1, d$total, col = i)
legend("topright", col = c(1:length(school.names())),
legend = school.names(), lty = rep(1,length(school.names())))
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(plotly)
library(ggplot2)
library(leaflet)
#################################### Schools Comparision ############################################
ui <- fluidPage(
titlePanel( 'Compare Data for Multiple Schools'),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = 'show_schools',
label = 'Schools to compare:',
choices = as.character(colnames(t.schools2014)),
selected = as.character(colnames(t.schools2014)[c(1,2)]),
width = "200px"
)
),
mainPanel(
tabsetPanel(
id = 'criminal.offenses',
tabPanel('Criminal Offenses',
DT::dataTableOutput('criminal.offenses'),
plotOutput("rate.bar"),
plotOutput("schoolTrend")))
)
)
)
server <- function(input, output) {
school <- t.schools2014
schools.selected <- reactive({school[, input$show_schools, drop = FALSE]})
output$criminal.offenses <- DT::renderDataTable({
DT::datatable(schools.selected(),
extensions = 'Buttons',
options = list(pageLength = 25, dom = 'Bfrtip', buttons = I('colvis')),
class = "display")
})
output$rate.bar <- renderPlot({
barplot(as.matrix(schools.selected()[dim(schools.selected())[1],]),
col = "pink", xlab = "Schools", ylab = "Crime Rate")
})
school.names <- reactive( {unique(input$show_schools)})
output$schoolTrend <- renderPlot({
xrange <- range(agg1$Group.1)
yrange <- c(0,200)
plot(xrange, yrange, type="n", xlab="Years",ylab="Total Crimes")
for(i in 1:length(school.names())){
d <- subset( agg1, agg1$Group.2 == school.names()[i] )
lines(d$Group.1, d$total, col = i)
legend("topright", col = c(1:length(school.names())),
legend = school.names(), lty = rep(1,length(school.names())))
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(plotly)
library(ggplot2)
library(leaflet)
#################################### Schools Comparision ############################################
ui <- fluidPage(
titlePanel( 'Compare Data for Multiple Schools'),
sidebarLayout(
sidebarPanel(
checkboxGroupInput(inputId = 'show_schools',
label = 'Schools to compare:',
choices = as.character(colnames(t.schools2014)),
selected = as.character(colnames(t.schools2014)[c(1,2)]),
width = "200px"
)
),
mainPanel(
tabsetPanel(
id = 'criminal.offenses',
tabPanel('Criminal Offenses',
DT::dataTableOutput('criminal.offenses'),
plotOutput("rate.bar"),
plotOutput("schoolTrend")))
)
)
)
server <- function(input, output) {
school <- t.schools2014
schools.selected <- reactive({school[, input$show_schools, drop = FALSE]})
output$criminal.offenses <- DT::renderDataTable({
DT::datatable(schools.selected(),
extensions = 'Buttons',
options = list(pageLength = 25, dom = 'Bfrtip', buttons = I('colvis')),
class = "display")
})
output$rate.bar <- renderPlot({
barplot(as.matrix(schools.selected()[dim(schools.selected())[1],]),
col = "pink", xlab = "Schools", ylab = "Crime Rate")
})
school.names <- reactive( {unique(input$show_schools)})
output$schoolTrend <- renderPlot({
xrange <- range(agg1$Group.1)
yrange <- c(0,150)
plot(xrange, yrange, type="n", xlab="Years",ylab="Total Crimes")
for(i in 1:length(school.names())){
d <- subset( agg1, agg1$Group.2 == school.names()[i] )
lines(d$Group.1, d$total, col = i)
legend("topright", col = c(1:length(school.names())),
legend = school.names(), lty = rep(1,length(school.names())))
}
})
}
shinyApp(ui = ui, server = server)
range(agg1$total)
runApp('app/new')
setwd("~/Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15")
runApp('app/new')
runApp('app/new')
crimes <- read.csv("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15/data/OPE CSS Custom Data 2017-02-12 134856/Criminal_Offenses_Noncampus.csv", header = T)
for(i in 6:19){
as.numeric(crimes[,i])
}
crimes$total <- rowSums(crimes[,-c(1:6)],na.rm = TRUE)
crimes.split <- split(crimes, f = as.factor(crimes$Survey.year))
year.sum <- NA
for(i in 1: length(crimes.split)){
year.sum[i] <- sum(crimes.split[[i]]$total)
}
agg <- aggregate(crimes[,-c(1:6)], list(crimes$Survey.year), sum)
schools.list <- list.files(path = "../data/Ranking/", pattern = "*.csv")
schools.list <- paste("/Users/ouminamikun/Desktop/Columbia/Spring 2017/ADS/Spr2017-proj2-grp15/data/Ranking/", schools.list, sep = "")
schools <- lapply(schools.list, read.csv)
for(i in 1:30){
schools[[i]]$total <- rowSums(schools[[i]][,-c(1:6)], na.rm = T)
}
d.schools <- ldply(schools)
agg1 <- aggregate(d.schools[,-c(1:6)], list(d.schools$Survey.year, d.schools$Institution.name), sum)
enrollment <- c(9181, 2209, 12587, 27589, 21679, 6298, 15865, 14769, 17858, 28791, 21372, 11319, 21554  ,8808, 6621, 16963,10907, 37565, 41845, 15097, 43625, 29135, 12179, 24806, 42453, 23732, 12686, 7788, 14348, 12336)
enrollment <- as.vector(sapply(enrollment, rep, 14))
agg1$institution.size <- enrollment
agg1$crime.rate <- round(agg1$total/agg1$institution.size,4)
schools2014 <- agg1[agg1$Group.1 == "2014",]
t.schools2014 <- t(schools2014)[-1,]
colnames(t.schools2014) <- as.character(t.schools2014[1,])
t.schools2014 <- as.data.frame(t.schools2014[-1,])
runApp('app/new')
runApp('app/new')
runApp('app/new')
